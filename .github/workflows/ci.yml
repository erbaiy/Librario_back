name: CI/CD Pipeline

on:
  push:
    branches: ['admin']
  pull_request:
    branches: ['main']

env:
  BACKEND_DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/librario_back
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/admin'

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_DOCKER_IMAGE }}:latest
            ${{ env.BACKEND_DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            NODE_ENV=production
          no-cache: true
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/admin'

    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Pull the latest image
            docker pull ${{ env.BACKEND_DOCKER_IMAGE }}:latest
            
            # Stop and remove the existing container if it exists
            docker stop librario_back || true
            docker rm librario_back || true
            
            # Run the new container
            docker run -d \
              --name librario_back \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e AWS_REGION='${{ secrets.AWS_REGION }}' \
              -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              ${{ env.BACKEND_DOCKER_IMAGE }}:latest
            
            # Clean up old images
            docker image prune -f
          "
